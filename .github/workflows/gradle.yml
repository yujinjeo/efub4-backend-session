# # This workflow uses actions that are not certified by GitHub.
# # They are provided by a third-party and are governed by
# # separate terms of service, privacy policy, and support
# # documentation.
# # This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

# name: CD/CI with Docker

# on:
#   push:
#     branches: ["week11"]

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3

#       - name: Set up JDK 17
#         uses: actions/setup-java@v3
#         with:
#           java-version: 17
#           distribution: 'zulu'

#       - name: Make application.yml
#         run: |
#           mkdir ./blog/src/main/resources
#           cd ./blog/src/main/resources
#           touch ./application.yml
#           echo "${{ secrets.APPLICATION }}" > ./application.yml

#       # - name: Gradle Caching
#       #   uses: actions/cache@v3
#       #   with:
#       #     path: |
#       #       ~/.gradle/caches
#       #       ~/.gradle/wrapper
#       #     key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#       #     restore-keys: |
#       #       ${{ runner.os }}-gradle-

#       - name: Build with Gradle
#         run: |
#           cd ./blog
#           chmod +x ./gradlew
#           ./gradlew build -x test

#       - name: Login to DockerHub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Docker build & push
#         uses: docker/build-push-action@v2
#         with:
#           context: ./blog
#           file: ./blog/Dockerfile
#           platforms: linux/arm64/v8
#           push: true
#           tags: ${{ secrets.DOCKER_REPO }}:latest

#       - name: Deploy to Server
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HOST }}
#           username: ${{ secrets.USERNAME }}
#           key: ${{ secrets.KEY }}
#           envs: GITHUB_SHA
#           script: |
#             sudo docker rm -f $(sudo docker ps -qa)
#             sudo docker pull ${{ secrets.DOCKER_REPO }}:latest
#             sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_REPO }}:latest
#             sudo docker image prune -f




name: Java CI with Gradle

on:
  push:
    branches: [ "week11" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Docker build & push
      uses: docker/build-push-action@v2
      with:
        context: ./blog
        file: ./blog/Dockerfile
        platforms: linux/arm64/v8
        push: true
        tags: ${{ secrets.DOCKER_REPO }}:latest
      

    - name: make application.yml
      run: |
          mkdir ./blog/src/main/resources
          cd ./blog/src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION }}" > ./application.yml
        
    - name: Build with Gradle
      run: |
        cd ./blog
        chmod +x ./gradlew
        ./gradlew build -x test

    - name: Docker Build
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}:latest .
        docker push ${{ secrets.DOCKER_REPO }}:latest
        
    - name: Deploy 
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key : ${{ secrets.KEY}}
        script: |
          docker stop spring-boot-container
          docker rm $(docker ps -a --filter "status=exited" -q)
          docker rmi ${{ secrets.DOCKER_REPO }}
    
          # Spring Boot 컨테이너 실행 및 my-network에 연결
          docker run -d --name spring-boot-container -p 8080:8080 ${{ secrets.DOCKER_REPO }}:latest
